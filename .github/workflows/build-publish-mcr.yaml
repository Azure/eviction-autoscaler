name: Build and publish to ACR

on:
  push:
    branches:
      - main  # Or your release branch

permissions:
  contents: read
  id-token: write

jobs:
  publish:
    runs-on:
      labels: [self-hosted, "1ES.Pool=1es-aks-eviction-autoscaler-pool-ubuntu"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Setup required tools
      shell: bash
      run: |
        set -e

        # Update package lists and install basic dependencies (excluding docker.io to avoid containerd conflict)
        sudo apt-get update
        sudo apt-get install -y curl jq make ca-certificates apt-transport-https gnupg lsb-release

        # Remove containerd.io if present, to avoid conflicts (safer than removing containerd)
        if dpkg -l | grep -q containerd.io; then
          echo "Removing conflicting containerd.io package..."
          sudo apt-get remove -y containerd.io
        fi

        # Install Docker using the official Docker APT repository (more secure)
        if ! command -v docker >/dev/null 2>&1; then
          echo "Installing Docker from official APT repository..."
          # Add Docker's official GPG key
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          # Set up the stable repository
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        fi

        # Ensure Azure CLI is available
        if ! command -v az >/dev/null 2>&1; then
          echo "Installing Azure CLI..."
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        fi

        # Install ko (container image builder for Go applications)
        if ! command -v ko >/dev/null 2>&1; then
          curl -LO https://github.com/google/ko/releases/download/v0.13.0/ko-linux-amd64
          chmod +x ko-linux-amd64 && sudo mv ko-linux-amd64 /usr/local/bin/ko
        fi

        # Install yq (YAML processor)
        if ! command -v yq >/dev/null 2>&1; then
          curl -sSfL https://github.com/mikefarah/yq/releases/download/v4.43.1/yq_linux_amd64 -o /tmp/yq
          sudo mv /tmp/yq /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
        fi

        # Install cosign (container signing tool)
        if ! command -v cosign >/dev/null 2>&1; then
          curl -LO https://github.com/sigstore/cosign/releases/download/v2.0.0/cosign-linux-amd64
          chmod +x cosign-linux-amd64 && sudo mv cosign-linux-amd64 /usr/local/bin/cosign
        fi

        # Install trivy (container/image scanning tool)
        if ! command -v trivy >/dev/null 2>&1; then
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
        fi

        echo "All tools installed successfully."

    - name: Verify Docker installation
      run: docker --version

    - name: Verify Azure CLI installation
      run: az --version

    - name: Verify ko installation
      run: ko --version

    - name: Verify yq installation
      run: yq --version

    - name: Verify cosign installation
      run: cosign version

    - name: Verify trivy installation
      run: trivy --version

        # Install trivy so trivy_scan() won't need to install it at runtime
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: v3.12.0
    - name: 'Login to the ACR'
      env:
        RELEASE_ACR: AKSMCRImagesCommon #owned by aks dev infra
      run: |
        az login --identity
        az acr login -n $RELEASE_ACR
        ./hack/release.sh
